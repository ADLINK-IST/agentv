package com.prismtech.agentv.core.types;


/**
* com/prismtech/agentv/core/types/MicrosvcActionCaseHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../idl/actions.idl
* Sunday, February 14, 2016 7:24:59 PM CET
*/

abstract public class MicrosvcActionCaseHelper
{
  private static String  _id = "IDL:com/prismtech/agentv/core/types/MicrosvcActionCase:1.0";

  public static void insert (org.omg.CORBA.Any a, com.prismtech.agentv.core.types.MicrosvcActionCase that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static com.prismtech.agentv.core.types.MicrosvcActionCase extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      org.omg.CORBA.TypeCode _disTypeCode0;
      _disTypeCode0 = com.prismtech.agentv.core.types.MicrosvcActionKindHelper.type ();
      org.omg.CORBA.UnionMember[] _members0 = new org.omg.CORBA.UnionMember [2];
      org.omg.CORBA.TypeCode _tcOf_members0;
      org.omg.CORBA.Any _anyOf_members0;

      // Branch for start (case label A_START)
      _anyOf_members0 = org.omg.CORBA.ORB.init ().create_any ();
      com.prismtech.agentv.core.types.MicrosvcActionKindHelper.insert (_anyOf_members0, com.prismtech.agentv.core.types.MicrosvcActionKind.A_START);
      _tcOf_members0 = com.prismtech.agentv.core.types.StartMicrosvcHelper.type ();
      _members0[0] = new org.omg.CORBA.UnionMember (
        "start",
        _anyOf_members0,
        _tcOf_members0,
        null);

      // Branch for stop (case label A_STOP)
      _anyOf_members0 = org.omg.CORBA.ORB.init ().create_any ();
      com.prismtech.agentv.core.types.MicrosvcActionKindHelper.insert (_anyOf_members0, com.prismtech.agentv.core.types.MicrosvcActionKind.A_STOP);
      _tcOf_members0 = com.prismtech.agentv.core.types.StopMicrosvcHelper.type ();
      _members0[1] = new org.omg.CORBA.UnionMember (
        "stop",
        _anyOf_members0,
        _tcOf_members0,
        null);
      __typeCode = org.omg.CORBA.ORB.init ().create_union_tc (com.prismtech.agentv.core.types.MicrosvcActionCaseHelper.id (), "MicrosvcActionCase", _disTypeCode0, _members0);
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static com.prismtech.agentv.core.types.MicrosvcActionCase read (org.omg.CORBA.portable.InputStream istream)
  {
    com.prismtech.agentv.core.types.MicrosvcActionCase value = new com.prismtech.agentv.core.types.MicrosvcActionCase ();
    com.prismtech.agentv.core.types.MicrosvcActionKind _dis0 = null;
    _dis0 = com.prismtech.agentv.core.types.MicrosvcActionKindHelper.read (istream);
    switch (_dis0.value ())
    {
      case com.prismtech.agentv.core.types.MicrosvcActionKind._A_START:
        com.prismtech.agentv.core.types.StartMicrosvc _start = null;
        _start = com.prismtech.agentv.core.types.StartMicrosvcHelper.read (istream);
        value.start (_start);
        break;
      case com.prismtech.agentv.core.types.MicrosvcActionKind._A_STOP:
        com.prismtech.agentv.core.types.StopMicrosvc _stop = null;
        _stop = com.prismtech.agentv.core.types.StopMicrosvcHelper.read (istream);
        value.stop (_stop);
        break;
    }
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, com.prismtech.agentv.core.types.MicrosvcActionCase value)
  {
    com.prismtech.agentv.core.types.MicrosvcActionKindHelper.write (ostream, value.discriminator ());
    switch (value.discriminator ().value ())
    {
      case com.prismtech.agentv.core.types.MicrosvcActionKind._A_START:
        com.prismtech.agentv.core.types.StartMicrosvcHelper.write (ostream, value.start ());
        break;
      case com.prismtech.agentv.core.types.MicrosvcActionKind._A_STOP:
        com.prismtech.agentv.core.types.StopMicrosvcHelper.write (ostream, value.stop ());
        break;
    }
  }

}
